TRAPPING RAIN WATER(HARD LEVEL)
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9
 
Constraints:
n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105
<----------------------------------------------------------------------------------->
class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        int l = 0; //2 pointers l and r iterate over the map
        int r = n-1;
        int lmax = 0; //index of leftmax height
        int rmax = n-1; //index of rightmax height
        int ans = 0;
        while(l<r)
        {
            if(height[l]<height[r]) //l is the deciding factor
            {
                if(height[l]>=height[lmax])
                { 
                    lmax = l; //update max left height
                }
                else if(height[l]<height[lmax])
                {
                    //water will be trapped here
                    ans+=height[lmax]-height[l];
                }
                l++;
            }
            else if(height[r]<=height[l]) //r is the deciding factor
            {
                if(height[r]>=height[rmax])
                {
                   rmax = r; //update max right height 
                }
                else if(height[r]<height[rmax]) 
                {
                    //water will be trapped here
                    ans+=height[rmax]-height[r];
                }
                r--;
            }
        }

        return ans;
    }
};
      
