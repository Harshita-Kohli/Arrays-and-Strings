You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:
1 <= prices.length <= 105
0 <= prices[i] <= 104

<------------------------------------------------------------------------------------------------->

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        int profit = 0;
        int minim = prices[0];
        //edge case:
        if(n<2)//only single or no element present, then return 0 as no profit can be made
        {
            return 0;
        }
        for(int i = 0;i<n;i++)
        {
            if(prices[i]<minim)//update the minim 
            {
                minim = prices[i];
            }
            else if(prices[i]-minim>profit)//otherwise, if the price is not lesser, then check whether it gives a greater profit. If so, update the profit
            {
                profit = prices[i]-minim; 
            }
        }
        return profit;
        
    }
};
