 Arranging Coins:
You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.
Given the integer n, return the number of complete rows of the staircase you will build.

 Example 1:
Input: n = 5
Output: 2
Explanation: Because the 3rd row is incomplete, we return 2.

Example 2:
Input: n = 8
Output: 3

Explanation: Because the 4th row is incomplete, we return 3.
 
Constraints:

1 <= n <= 231 - 1
<-------------------------------------------------------------------------------------------->

class Solution {
public:
//     Naive Approach: O(n^2) worst case time complexity
    // int arrangeCoins(int n) {
    //     int t[n][n];
    //     bool flag = true;
    //     int coins = n;//no of coins we have
    //     int count = 0;//no of rows completely filled
    //     for(int i = 0;i<n;i++)
    //     {
    //         for(int j = 0;j<=i;j++)
    //         {
    //             if(coins>0) //if we have coins available
    //             {
    //                coins--; 
    //             }
    //             else{
    //                 flag = false;
    //                 break;//we can't fill that cell with a coin
    //             }
    //         }
    //         if(flag == false)
    //         {
//                 // cout<<"inside flag = false";
//               break; //we can't increment the count of rows and we exit the filling procedure by breaking outer loop 
//             }
//             else
//             {
//                 count++;
//             }
            
//         }
//         return count;
//     }
};
  // BINARY SEARCH APPROACH: O(log(n)). We can reformulate the problem statement as: Find max value of k such that k(k+1)/2 <= n. We want to find the maximum value of K ie the largest row number such that the no of coins stored uptill that row is less than or equal to n; 
  // ****We want to ensure that k is such a row uptill which the coins are completely filling each row*****. If the row  = k, then the no of coins used till that row should be k(k+1)/2. andthis number should not exceed the total no of coins provided to us
  class Solution {
  public:
  int arrangeCoins(int n) {
      long l = 0;//the smallest value of k could be the 0th row
      long u = n;//the largest value of k could be the nth row
      long k;
      long cursum = 0;//initially, cursum = 0, and the max value of cursum can be = n
      while(l<=u)
      {
          k = l+(u-l)/2;
          cursum = k*(k+1)/2;//sum of coins upto the kth row will be k(k+1)/2
          if(cursum==n)//we have filled all the rows
          {
              return k;
          }
          else if(cursum<n)
          {
              l = k+1;
          }
          else if(cursum>n)
          {
              u = k-1;
          }
      }
      return u;

    }
};
